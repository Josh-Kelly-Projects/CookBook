/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kelly;
/**
 *inventory updater screen
 * @author kelly
 */
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *inventory updater screen
 * @author kelly
 */
public class InventoryUpdaterGUI extends javax.swing.JFrame
{

    /**
     * Creates new form InventoryUpdaterGUI
     */
    private static User user;
    private static String pool;
    private DB db = new DB();
    private InventoryArr inventArr;
    private Inventory[] invenArr = new Inventory[2000];
    private int invtArrSize = 0;

    private static IngredientsArr ingArr;
    private int cnt = 0;
    private int[] ingsAdd = new int[2000];

    private boolean isStringDigits(String numberIn)
    {
        boolean isNums = true;
        for (int i = 0; i < numberIn.length(); i++)
        {
            if (!Character.isDigit(numberIn.charAt(i)))
            {
                isNums = false;
            }
        }
        return isNums;
    }

    public InventoryUpdaterGUI(User u, String p, IngredientsArr ing)
    {
        initComponents();
        user = u;
        pool = p;
        ingArr = ing;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pnlBackG = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblList = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnAddMore = new javax.swing.JButton();
        lblError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Inventory Updater");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
        });

        pnlBackG.setBackground(new java.awt.Color(204, 255, 255));

        lblTitle.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 51, 51));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Kelly's Recipes");
        lblTitle.setMaximumSize(new java.awt.Dimension(200, 29));
        lblTitle.setMinimumSize(new java.awt.Dimension(200, 29));
        lblTitle.setName(""); // NOI18N

        tblList.setBackground(new java.awt.Color(255, 153, 153));
        tblList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Ingredient", "Bought", "Amount Bought (val_unit)", "Expiry date yyyy-mm-dd"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblList.setToolTipText("");
        jScrollPane1.setViewportView(tblList);
        if (tblList.getColumnModel().getColumnCount() > 0)
        {
            tblList.getColumnModel().getColumn(0).setResizable(false);
            tblList.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblList.getColumnModel().getColumn(1).setResizable(false);
            tblList.getColumnModel().getColumn(1).setPreferredWidth(7);
            tblList.getColumnModel().getColumn(2).setResizable(false);
        }

        btnUpdate.setBackground(new java.awt.Color(102, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAddMore.setText("Add More Items");
        btnAddMore.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAddMoreActionPerformed(evt);
            }
        });

        lblError.setForeground(new java.awt.Color(255, 0, 51));

        javax.swing.GroupLayout pnlBackGLayout = new javax.swing.GroupLayout(pnlBackG);
        pnlBackG.setLayout(pnlBackGLayout);
        pnlBackGLayout.setHorizontalGroup(
            pnlBackGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
            .addGroup(pnlBackGLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackGLayout.createSequentialGroup()
                        .addComponent(btnAddMore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate)))
                .addContainerGap())
        );
        pnlBackGLayout.setVerticalGroup(
            pnlBackGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackGLayout.createSequentialGroup()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(pnlBackGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlBackGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnUpdate)
                        .addComponent(btnAddMore)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(513, 287));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnUpdateActionPerformed
    {//GEN-HEADEREND:event_btnUpdateActionPerformed
        tblList.editCellAt(0, 0);
        int count = 0;
        boolean valid = false;
        String id = "";
        String date = "";
        String amount = "";

        while (null != tblList.getValueAt(count, 0))
        {
            if (null != tblList.getValueAt(count, 1))
            {
                valid = false;
                if (null != tblList.getValueAt(count, 2) && null != tblList.getValueAt(count, 3))
                {
                    try
                    {
                        String ingr = tblList.getValueAt(count, 0).toString();
                        amount = tblList.getValueAt(count, 2).toString();
                        date = tblList.getValueAt(count, 3).toString();

                        ResultSet rs = db.query("SELECT id FROM tblingrediants WHERE tblingrediants.ingredients LIKE '" + ingr + "'");
                        rs.next();
                        id = rs.getString("id");

                        String[] amountArr = amount.split(" ");
                        String[] dateArr = date.split("-");
                        if (amountArr.length == 2)
                        {
                            if (Units.UNITS[0].equalsIgnoreCase(amountArr[1]) || Units.UNITS[1].equalsIgnoreCase(amountArr[1]) || Units.UNITS[2].equalsIgnoreCase(amountArr[1]) || Units.UNITS[3].equalsIgnoreCase(amountArr[1]))
                            {
                                if (isStringDigits(amountArr[0]))
                                {
                                    if (dateArr.length == 3)
                                    {
                                        if (dateArr[0].length() == 4 && dateArr[1].length() == 2 && dateArr[2].length() == 2)
                                        {
                                            if (isStringDigits(dateArr[0]) && isStringDigits(dateArr[1]) && isStringDigits(dateArr[2]))
                                            {
                                                try
                                                {
                                                    db.update("UPDATE tblfridgeinventory SET  `expiryDate` = '" + date + "' WHERE `ingredientID` = 20000 ");
                                                    valid = true;
                                                } catch (SQLException ex2)
                                                {
                                                    lblError.setText("not valid date");
                                                }
                                            } else
                                            {
                                                lblError.setText("date must be numbers");
                                            }
                                        } else
                                        {
                                            lblError.setText("date not in correct form");
                                        }
                                    } else
                                    {
                                        lblError.setText("date incorrectly entered");
                                    }
                                } else
                                {
                                    lblError.setText("amount must be a number");
                                }
                            } else
                            {
                                lblError.setText("Units are wrong");
                            }

                        } else
                        {
                            lblError.setText("Amount incorrectly entered");
                        }

                    } catch (SQLException ex)
                    {
                        lblError.setText("database not available");
                        Logger.getLogger(InventoryUpdaterGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (valid)
                    {
                        try
                        {
                            ResultSet rs = db.query("SELECT * FROM tblfridgeinventory WHERE ingredientID = " + id + " AND poolID = " + pool);
                            rs.next();
                            rs.getString("ingredientID");
                            db.update("UPDATE tblfridgeinventory SET `quantity` = '" + amount + "', `expiryDate` = '" + date + "', `shoppinglistitem` = false, `emptyitem` = false WHERE `ingredientID` = " + id + " AND `poolID` = " + pool);
                            System.out.println(amount + date);
                        } catch (SQLException ex)
                        {
                            try
                            {
                                db.update("INSERT INTO kellygr11pat.tblfridgeinventory (`ingredientID`, shoppinglistitem, emptyitem, expirydate, quantity, `poolID`) VALUES (" + id + ", false, false, '" + date + "', '" + amount + "', " + pool + ")");
                            } catch (SQLException ex1)
                            {
                                Logger.getLogger(InventoryUpdaterGUI.class.getName()).log(Level.SEVERE, null, ex1);
                            }
                        }
                    }
                } else
                {
                    lblError.setText("enter amount and date");
                }
            }

            count++;
        }
        if (valid)
        {
            this.dispose();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddMoreActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddMoreActionPerformed
    {//GEN-HEADEREND:event_btnAddMoreActionPerformed
        new IngredientAdderGUI(user, pool).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnAddMoreActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        inventArr = new InventoryArr(pool);
        invtArrSize = inventArr.getSize();
        invenArr = inventArr.getInvenArr();
        for (int i = 0; i < invtArrSize; i++)
        {
            if (invenArr[i].isShopLis() == true)
            {
                tblList.setValueAt(invenArr[i].getIngname(), cnt, 0);
                ingsAdd[cnt] = i;
                cnt++;
            }
        }

        Ingredients[] tempIngrs = ingArr.getIngArr();
        for (int i = 0; i < ingArr.getSize(); i++)
        {
            tblList.setValueAt(tempIngrs[i].getIngName(), cnt, 0);
            cnt++;
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(InventoryUpdaterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(InventoryUpdaterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(InventoryUpdaterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(InventoryUpdaterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new InventoryUpdaterGUI(user, pool, ingArr).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMore;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlBackG;
    private javax.swing.JTable tblList;
    // End of variables declaration//GEN-END:variables
}
